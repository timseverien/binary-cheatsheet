---
import { TableOfContents } from '../application/types';
import {
	DemoBitwiseBinaryOperator,
	DemoBitwiseShiftOperator,
	DemoBitwiseUnaryOperator,
} from '../components/Demo';
import { PracticalReadBit } from '../components/Demo/Practical';
import {
	Not,
	And,
	Or,
	Xor,
	ShiftLeft,
	ShiftRight,
	ShiftRightUnsigned,
} from '../components/Operator';
import { BinaryString } from '../functions/binaryString';
import ContentLayout from '../layouts/ContentLayout.astro';

const PAGE_TITLE = 'The Binary Cheatsheet';
const PAGE_DESCRIPTION = 'A cheatsheet for bits and bytes';

const tableOfContents: TableOfContents = [
	{
		url: '#operators',
		title: 'Operators',
		children: [
			{
				url: '#operators-not',
				title: 'NOT',
				operator: '~',
			},
			{
				url: '#operators-and',
				title: 'AND',
				operator: '&',
			},
			{
				url: '#operators-or',
				title: 'OR',
				operator: '|',
			},
			{
				url: '#operators-xor',
				title: 'XOR',
				operator: '^',
			},
			{
				url: '#operators-shift-left',
				title: 'Left shift',
				operator: '<<',
			},
			{
				url: '#operators-shift-right',
				title: 'Right shift',
				operator: '>>',
			},
			{
				url: '#operators-shift-right-unsigned',
				title: 'Unsigned right shift',
				operator: '>>>',
			},
		],
	},
	{
		url: '#practical',
		title: 'Practical',
		children: [
			{
				url: '#practical-get',
				title: 'Get a bit',
			},
			{
				url: '#practical-set',
				title: 'Set a bit',
			},
			{
				url: '#practical-toggle',
				title: 'Toggle a bit',
			},
			{
				url: '#practical-flags',
				title: 'Store flags',
			},
			{
				url: '#practical-hex-to-rgb',
				title: 'Hex to RGB',
			},
			{
				url: '#practical-rgb-to-hex',
				title: 'RGB to hex',
			},
		],
	},
];
---

<ContentLayout title={PAGE_TITLE} description={PAGE_DESCRIPTION} tableOfContents={tableOfContents}>
	<h1>The Binary Cheatsheet</h1>
	<p>
		In this cheatsheet, you’ll find brief explainers of all bitwise operators and practical
		examples.
	</p>

	<h2 id="operators">Operators</h2>

	<p>
		Bitwise operators are operators that allow you to modify data on bit-level. Welcome to <a
			href="https://en.wikipedia.org/wiki/Boolean_algebra"
			target="_blank">Boolean algebra</a
		>.
	</p>

	<h3 id="operators-not"><Not /></h3>
	<p>
		Flipping (or negating) bits can be done using the <b><Not /></b> operator — it toggles all bits.
	</p>

	<DemoBitwiseUnaryOperator initialBinaryValue={'1001' as BinaryString} initialOperator="~" />

	<h3 id="operators-and"><And /></h3>
	<p>
		The <b><And /></b> operator returns 1 for each bit if the corresponding bits of both operands are
		1’s.
	</p>

	<DemoBitwiseBinaryOperator
		initialLeftBinaryValue={'1010' as BinaryString}
		initialRightBinaryValue={'1001' as BinaryString}
		initialOperator="&"
		client:idle
	/>

	<h3 id="operators-or"><Or /></h3>
	<p>The <b><Or /></b> operator returns 1’s for each bit if either of the operands is 1.</p>

	<DemoBitwiseBinaryOperator
		initialLeftBinaryValue={'1010' as BinaryString}
		initialRightBinaryValue={'1001' as BinaryString}
		initialOperator="|"
		client:idle
	/>

	<h3 id="operators-xor"><Xor /></h3>
	<p>
		Similar to the <b><Or /></b> operator, the <b><Xor /></b> (exclusive OR) operator only returns 1’s
		if either of the corresponding bits of the operands is 1, but 0 if both are.
	</p>

	<DemoBitwiseBinaryOperator
		initialLeftBinaryValue={'1010' as BinaryString}
		initialRightBinaryValue={'1001' as BinaryString}
		initialOperator="^"
		client:idle
	/>

	<h3 id="operators-shift-left"><ShiftLeft /></h3>
	<p>
		The <b><ShiftLeft /></b> moves bits to the left. Additional bits, 0s, will be added on the right-hand
		side.
	</p>

	<div>
		<DemoBitwiseShiftOperator
			initialBinaryValue={'1001' as BinaryString}
			initialOperator="<<"
			initialShiftValue={2}
			client:idle
		/>
	</div>

	<h3 id="operators-shift-right"><ShiftRight /></h3>
	<p>
		The <b><ShiftRight /></b> moves bits to the right. Right-hand bits will be discarded.
	</p>

	<small>This operation preserves the sign of the value — negative numbers stay negative.</small>

	<div>
		<DemoBitwiseShiftOperator
			initialBinaryValue={'1001' as BinaryString}
			initialOperator=">>"
			initialShiftValue={2}
			client:idle
		/>
	</div>

	<h3 id="operators-shift-right-unsigned"><ShiftRightUnsigned /></h3>
	<p>
		The <b><ShiftRightUnsigned /></b> also shift bits right, but zero-fills from the left.
	</p>

	<small
		>Unlike the <b><ShiftRight /></b>, this operation assumes values are unsigned. When used on a
		signed integer, the bit for the sign will also shift, making it a positive integer.</small
	>

	<div>
		<DemoBitwiseShiftOperator
			initialBinaryValue={'1001' as BinaryString}
			initialOperator=">>>"
			initialShiftValue={2}
			client:idle
		/>
	</div>

	<h2 id="practical">Practical</h2>

	<h3 id="practical-get">Read a bit at a specific position</h3>
	<p>
		First, a set of bits must be shifted to the right until the bit of interest is all the way on
		the right. To discard all other bits, we can use the <b><And /></b> operator with a so called <b
			>bitmask</b
		>.
	</p>
	<PracticalReadBit
		initialBitmask={'1' as BinaryString}
		initialShift={2}
		initialValue={'1101' as BinaryString}
	/>

	<!-- DEMO -->
	<p>
		The bitmask determines how much of the info is returned, so to get two bits, a two-bit bitmask
		is required.
	</p>
	<!-- DEMO -->

	<h3 id="practical-set">Set a bit</h3>
	<p>
		To set a specific bit to 1, you can use the <b><Or /></b> operator. First, the bit you wish to set
		is shifted to the position you wish to set it to, the <b><Or /></b> operator does the rest.
	</p>
	<!-- DEMO -->
	<p>To set a specific bit to 0, you must use the <b><And /></b> operator.</p>
	<!-- DEMO -->
	<p>
		If the new bit has a dynamic value, the following allows you to change a bit to any value at a
		given position.
	</p>
	<!-- DEMO -->

	<h3 id="practical-toggle">Toggle a bit at a specific position</h3>
	<p>
		The <b><Xor /></b> operator returns 1 if operands are unequal. By having one operand set to 1, it
		toggles.
	</p>
	<!-- DEMO -->

	<h3 id="practical-flags">Store flags</h3>
	<p>
		Flags, a fancy name for “options,” can easily be stored in a byte. This example is inspired by
		the <a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol" target="_blank"
			>TCP protocol</a
		>.
	</p>
	<!-- DEMO -->

	<h3 id="practical-hex-to-rgb">Hex to RGB</h3>
	<p>
		Colours are often stored as hexadecimals. Sometimes, you will want to get the value of each
		channel. Note that hexadecimals are just another representation of uints.
	</p>
	<!-- DEMO -->

	<h3 id="practical-rgb-to-hex">RGB to hex</h3>
	<p>You can do the opposite as well; convert RGB to hexadecimals.</p>
	<!-- DEMO -->
</ContentLayout>
